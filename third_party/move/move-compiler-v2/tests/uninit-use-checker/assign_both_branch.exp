
Diagnostics:
warning: A trailing `;` in an expression block implicitly adds a `()` value expression after the semicolon, not needed here.
  ┌─ tests/uninit-use-checker/assign_both_branch.move:5:18
  │
5 │             x = 1;
  │                  ^

warning: A trailing `;` in an expression block implicitly adds a `()` value expression after the semicolon, not needed here.
  ┌─ tests/uninit-use-checker/assign_both_branch.move:7:18
  │
7 │             x = 2;
  │                  ^

============ initial bytecode ================

[variant baseline]
fun m::test($t0: bool): u64 {
     var $t1: u64
     var $t2: u64
     var $t3: u64
     var $t4: u64
  0: if ($t0) goto 1 else goto 5
  1: label L0
  2: $t3 := 1
  3: $t2 := infer($t3)
  4: goto 8
  5: label L1
  6: $t4 := 2
  7: $t2 := infer($t4)
  8: label L2
  9: $t1 := infer($t2)
 10: return $t1
}

============ after uninitialized_use_checker: ================

[variant baseline]
fun m::test($t0: bool): u64 {
     var $t1: u64
     var $t2: u64
     var $t3: u64
     var $t4: u64
     # before: { no: $t1, $t2, $t3, $t4 }, after: { no: $t1, $t2, $t3, $t4 }
  0: if ($t0) goto 1 else goto 5
     # before: { no: $t1, $t2, $t3, $t4 }, after: { no: $t1, $t2, $t3, $t4 }
  1: label L0
     # before: { no: $t1, $t2, $t3, $t4 }, after: { no: $t1, $t2, $t4 }
  2: $t3 := 1
     # before: { no: $t1, $t2, $t4 }, after: { no: $t1, $t4 }
  3: $t2 := infer($t3)
     # before: { no: $t1, $t4 }, after: { no: $t1, $t4 }
  4: goto 8
     # before: { no: $t1, $t2, $t3, $t4 }, after: { no: $t1, $t2, $t3, $t4 }
  5: label L1
     # before: { no: $t1, $t2, $t3, $t4 }, after: { no: $t1, $t2, $t3 }
  6: $t4 := 2
     # before: { no: $t1, $t2, $t3 }, after: { no: $t1, $t3 }
  7: $t2 := infer($t4)
     # before: { no: $t1 }{ maybe: $t3, $t4 }, after: { no: $t1 }{ maybe: $t3, $t4 }
  8: label L2
     # before: { no: $t1 }{ maybe: $t3, $t4 }, after: { maybe: $t3, $t4 }
  9: $t1 := infer($t2)
     # before: { maybe: $t3, $t4 }, after: { maybe: $t3, $t4 }
 10: return $t1
}
