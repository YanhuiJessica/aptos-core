
Diagnostics:
warning: A trailing `;` in an expression block implicitly adds a `()` value expression after the semicolon, not needed here.
   ┌─ tests/reference-safety/v1-borrow-tests/mutable_borrow_invalid.move:17:28
   │
17 │         foo(x, &mut root.f);
   │                            ^


Diagnostics:
error: cannot mutably borrow since mutable references exist
   ┌─ tests/reference-safety/v1-borrow-tests/mutable_borrow_invalid.move:9:9
   │
 6 │         let x = if (cond) &mut root.f else &mut root.g;
   │                           -----------      ----------- previous mutable field borrow
   │                           │
   │                           previous mutable field borrow
   ·
 9 │         root.f = 1;
   │         ^^^^^^----
   │         │
   │         requirement enforced here
   │         mutable borrow attempted here
10 │         *x;
   │         -- conflicting reference `x` used here

error: cannot mutably borrow since mutable references exist
   ┌─ tests/reference-safety/v1-borrow-tests/mutable_borrow_invalid.move:17:16
   │
14 │         let x = if (cond) &mut root.f else &mut root.g;
   │                           -----------      ----------- previous mutable field borrow
   │                           │
   │                           previous mutable field borrow
   ·
17 │         foo(x, &mut root.f);
   │         -------^^^^^^^^^^^-
   │         │      │
   │         │      mutable borrow attempted here
   │         requirement enforced here
